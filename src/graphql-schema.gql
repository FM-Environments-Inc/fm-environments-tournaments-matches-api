# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Season {
  id: Float!
  environment: String!
  sequenceNumber: Float!
  createdAt: DateTime!
  finishedAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MatchAction {
  id: Float!
  environment: String!
  team: String!
  player: String!
  type: String!
  minute: Float!
  match: Match!
  createdAt: DateTime!
}

type Player {
  _id: String!
  firstName: String
  lastName: String
  evaluation: Float
  features: String
  role: String
  position: String
}

type MatchTeamPlayer {
  position: String!
  isPenaltyShooter: Boolean
  isFreeKicker: Boolean
  isCornerKicker: Boolean
  reference: Player
}

type MatchTeam {
  _id: String!
  logo: String
  name: String!
  players: [MatchTeamPlayer!]!
}

type GetAllMatchesResponse {
  matches: [Match!]!
  total: Float!
  page: Float!
  limit: Float!
}

type Match {
  id: Float!
  environment: String!
  team1: String!
  team2: String!
  team1Goals: Float!
  team2Goals: Float!
  winner: String
  finishedAt: DateTime
  createdAt: DateTime!
  actions: [MatchAction!]
  teams: [MatchTeam!]
}

type Query {
  currentSeason(environment: String!): Season
  seasons(environment: String!): [Season!]!
  latestTeamMatches(teamId: String!, environment: String!, count: Float): [Match!]!
  match(id: Float!): Match!
  matches(environment: String!, limit: Float = 20, page: Float = 1): GetAllMatchesResponse!
}

type Mutation {
  createSeason(createSeasonData: CreateSeasonInput!): Season!
  finishSeason(finishSeasonData: FinishSeasonInput!): Season!
  createMatch(createMatchData: CreateMatchInput!): Match!
  finishMatch(finishMatchData: FinishMatchInput!): Match!
}

input CreateSeasonInput {
  environment: String!
}

input FinishSeasonInput {
  environment: String!
}

input CreateMatchInput {
  environment: String!
  team1: String!
  team2: String!
}

input FinishMatchInput {
  id: Float!
  environment: String!
  winner: String
  team1Goals: Float!
  team2Goals: Float!
  actions: [Action!] = []
  participants: [Participant!] = []
}

input Action {
  player: String!
  team: String
  type: String!
  minute: Float!
}

input Participant {
  player: String!
  team: String!
}